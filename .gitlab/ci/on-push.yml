.push-rule:
  rules:
    - if: '$CI_PIPELINE_SOURCE =~ /^(push)$/'


.download-configuration: &download_demisto_conf
  - echo "======= Download configuration ========"
  - ./Tests/scripts/download_demisto_conf.sh  >> $ARTIFACTS_FOLDER/logs/installations.log

.notify-slack:
  after_script:
    - echo "=====Notify Slack====="
    - |
      if [ -n "${SLACK_ONLY_IF}" ]; then
        ./Tests/scripts/slack_notifier.sh "$SLACK_TEST_TYPE" "$SLACK_ENV_RESULTS" "$SLACK_CHANNEL"
      else
        echo "Skipping Slack"
      fi

run-unittests-and-lint:
  needs: []
  stage: unittests-and-validations
  rules:
    - if: '$FORCE_BUCKET_UPLOAD != "true"'
  artifacts:
    expire_in: 48 hrs
    paths:
      - /builds/xsoar/content/unit-tests
      - /builds/xsoar/content/artifacts/*
  extends:
    - .default-job-settings
    - .notify-slack
  variables:
    SLACK_TEST_TYPE: "unittests"
    SLACK_ENV_RESULTS: $ENV_RESULTS_PATH
    SLACK_ONLY_IF: $BUCKET_UPLOAD
  script:
    - echo "====Trigger Private Build===="
    - |
      if [[ -n $FORCE_BUCKET_UPLOAD || -n $BUCKET_UPLOAD || $CI_COMMIT_BRANCH =~ pull/[0-9]+ ]] || [[ -n $SKIP_PRIVATE_BUILD ]]; then
        echo "Skipping - not running in bucket upload, contrib branches or id skip is enabled."
      else
        python3 Utils/trigger_private_build.py --github-token $GITHUB_TOKEN
      fi
    - echo "====Test Infrustracture===="
    - python3 -m pytest ./Tests/scripts/infrastructure_tests/ -v
    - python3 -m pytest ./Tests/Marketplace/Tests/ -v
    - python3 -m pytest ./Tests/scripts/utils/tests -v
    - python3 -m pytest ./Tests/tests -v
    - python3 -m pytest ./Tests/private_build/ -v
    - python3 -m pytest Utils -v
    - |
      if [ -n "${DEMISTO_SDK_NIGHTLY}" ] ; then
      ./Tests/scripts/sdk_pylint_check.sh
      fi
    - echo "====Run Unit Testing and Lint===="
    - |
      if [[ -n $FORCE_BUCKET_UPLOAD || -n $BUCKET_UPLOAD ]] && [[ "$(echo "$GCS_MARKET_BUCKET" | tr '[:upper:]' '[:lower:]')" != "marketplace-dist" ]]; then
        echo "Skipping validations when uploading to a test bucket."
      else
        echo "demisto-sdk version: $(demisto-sdk --version)"
        echo "mypy version: $(mypy --version)"
        echo "flake8 py2 version: $(python2 -m flake8 --version)"
        echo "flake8 py3 version: $(python3 -m flake8 --version)"
        echo "bandit py2 version: $(python2 -m bandit --version 2>&1)"
        echo "bandit py3 version: $(python3 -m bandit --version 2>&1)"
        echo "vulture py2 version: $(python2 -m vulture --version 2>&1)"
        echo "vulture py3 version: $(python3 -m vulture --version 2>&1)"
        SHOULD_LINT_ALL=$(./Tests/scripts/should_lint_all.sh)
        mkdir ./unit-tests
        if [ -n "$SHOULD_LINT_ALL" ]; then
          echo -e  "----------\nLinting all because:\n${SHOULD_LINT_ALL}\n----------"
          demisto-sdk lint -p 8 -a -q --test-xml ./unit-tests --log-path $ARTIFACTS_FOLDER --failure-report $ARTIFACTS_FOLDER
        else
          demisto-sdk lint -p 8 -g -v --test-xml ./unit-tests --log-path $ARTIFACTS_FOLDER --failure-report $ARTIFACTS_FOLDER
        fi
      fi
    - echo "====Get Private Build Status===="
    - |
      if [[ -n $FORCE_BUCKET_UPLOAD || -n $BUCKET_UPLOAD || $CI_COMMIT_BRANCH =~ pull/[0-9]+ || -n $SKIP_PRIVATE_BUILD ]]; then
        echo "Skipping - not running in bucket upload, contrib branches or id skip is enabled."
      else
        python3 Utils/get_private_build_status.py --github-token $GITHUB_TOKEN
      fi

run-validations:
  stage: unittests-and-validations
  extends:
    - .default-job-settings
  needs: []
  rules:
    - if: '$FORCE_BUCKET_UPLOAD != "true"'
  artifacts:
    expire_in: 48 hrs
    paths:
      - /builds/xsoar/content/artifacts/*
  script:
    - echo "====Look For Secrets===="
    - demisto-sdk secrets --post-commit --ignore-entropy
    - echo "====Create id set===="
    - demisto-sdk create-id-set -o ./Tests/id_set.json > $ARTIFACTS_FOLDER/logs/create_id_set.log
    - cp ./Tests/id_set.json $ARTIFACTS_FOLDER
    - echo "====Merge public and private id sets===="
    - |
      if [[ $CI_COMMIT_BRANCH =~ pull/[0-9]+ ]]; then
          echo "Skipping, Should not run on contributor's branch."
      else
        gcloud auth activate-service-account --key-file="$GCS_MARKET_KEY" > auth.out
        echo "successfully activated google cloud service account"

        echo "Download private ID set"
        gsutil cp "gs://marketplace-dist/content/private_id_set.json" $ARTIFACTS_FOLDER/unified_id_set.json
        echo "successfully downloaded private ID set"
        gcloud auth revoke $GCS_ARTIFACTS_ACCOUNT_NAME

        echo "Merge public and private ID sets"
        demisto-sdk merge-id-sets -i1 ./Tests/id_set.json -i2 $ARTIFACTS_FOLDER/unified_id_set.json -o $ARTIFACTS_FOLDER/unified_id_set.json
        echo "successfully merged public and private ID sets"
      fi
    - echo "====Update Tests===="
    - python3 ./Tests/scripts/update_conf_json.py
    - cp "./Tests/conf.json" "$ARTIFACTS_FOLDER/conf.json"
    - echo "====Validate Files and Yaml===="
    - |
      if [[ "$(echo "$GCS_MARKET_BUCKET" | tr '[:upper:]' '[:lower:]')" != "marketplace-dist" ]]; then
        echo "Skipping the -Validate Files and Yaml- step when uploading to a test bucket."
      else
        echo "Run flake8 on all excluding Packs (Integrations and Scripts) - they will be handled in linting"
        ./Tests/scripts/pyflake.sh *.py
        # do not run pyflake on venv or content-test-conf awsinstancetool
        find . -maxdepth 1 -type d -not \( -path . -o -path ./Packs -o -path ./venv -o -path ./Tests \) | xargs ./Tests/scripts/pyflake.sh
        ./Tests/scripts/pyflake.sh ./Tests/*.py
        find ./Tests -maxdepth 1 -type d -not \( -path ./Tests -o -path ./Tests/scripts \) | xargs ./Tests/scripts/pyflake.sh
        ./Tests/scripts/pyflake.sh ./Tests/scripts/*.py
        find ./Tests/scripts -maxdepth 1 -type d -not \( -path ./Tests/scripts -o -path ./Tests/scripts/awsinstancetool \) | xargs ./Tests/scripts/pyflake.sh
        ./Tests/scripts/validate.sh
      fi
    - echo "====Check Spelling===="
    - python3 ./Tests/scripts/circleci_spell_checker.py $CI_COMMIT_BRANCH
    - echo "====Check Build Files Are Up To Date===="
    - |
      if [[ $$CI_COMMIT_BRANCH =~ pull/[0-9]+ ]]; then
        echo "Skipping, Should not run on contributor's branch."
      else
        ./Tests/scripts/is_file_up_to_date.sh .gitlab-ci.yml
        ./Tests/scripts/is_file_up_to_date.sh .dev-requirements-py2.txt
        ./Tests/scripts/is_file_up_to_date.sh .dev-requirements-py3.txt
      fi
    - echo "====Validate content-test-conf Branch Merged===="
    - |
      if [[ $CI_COMMIT_BRANCH = "master" ]]; then
        echo "Skipping, Should not run on master branch."
      else
        # replace slashes ('/') in the branch name, if exist, with underscores ('_')
        UNDERSCORE_CI_BRANCH=${CI_COMMIT_BRANCH//\//_}
        wget --header "Accept: application/vnd.github.v3.raw" --header "Authorization: token $GITHUB_TOKEN" "https://github.com/demisto/content-test-conf/archive/$UNDERSCORE_CI_BRANCH.zip" --no-check-certificate -q || {
          if [ "$?" != "0" ]; then
            echo "No such branch in content-test-conf: $UNDERSCORE_CI_BRANCH"
          else
            echo "ERROR: Found a branch with the same name in contest-test-conf conf.json - $UNDERSCORE_CI_BRANCH.\n Merge it in order to merge the current branch into content repo."
            exit 1
          fi
        }
      fi
    - echo "====Validate landingPageSections.json===="
    - echo "Download index.zip"
    - INDEX_PATH=$(mktemp)
    - |
      gsutil cp "gs://marketplace-dist/content/packs/index.zip" $INDEX_PATH
    - echo "successfully downloaded index.zip into $INDEX_PATH"

    - UNZIP_PATH=$(mktemp -d)
    - unzip $INDEX_PATH -d $UNZIP_PATH > $ARTIFACTS_FOLDER/logs/unzip_index.log

    - python3 Tests/Marketplace/validate_landing_page_sections.py -i $UNZIP_PATH


create-instances:
  extends:
    - .default-job-settings
    - .nightly-rule
  cache:
    policy: pull-push
    when: always
  needs: []
  stage: create-instances
  script:
    - *download_demisto_conf
    - demisto-sdk create-id-set -o ./Tests/id_set.json >> $ARTIFACTS_FOLDER/logs/create_id_set.log
    - cp ./Tests/id_set.json $ARTIFACTS_FOLDER
    - python3 Utils/release_notes_generator.py $CONTENT_VERSION $CI_COMMIT_SHA $CI_BUILD_ID --output $ARTIFACTS_FOLDER/packs-release-notes.md --github-token $GITHUB_TOKEN
    - cp content-descriptor.json $ARTIFACTS_FOLDER
    - ./Documentation/commonServerDocs.sh
    - demisto-sdk create-content-artifacts -a $ARTIFACTS_FOLDER --cpus 8 --content_version $CONTENT_VERSION >> $ARTIFACTS_FOLDER/logs/create_content_artifacts.log
    - gcloud auth activate-service-account --key-file="$GCS_ARTIFACTS_KEY"
    - successful_feature_branch_build=$(gsutil ls "gs://xsoar-ci-artifacts/content/$FEATURE_BRANCH_NAME/*" | tail -n 1 | grep -o -E "content/$FEATURE_BRANCH_NAME/[0-9]*")
    - echo $successful_feature_branch_build
    - python3 Utils/merge_content_new_zip.py -f $FEATURE_BRANCH_NAME -b $successful_feature_branch_build
    - zip -j $ARTIFACTS_FOLDER/uploadable_packs.zip $ARTIFACTS_FOLDER/uploadable_packs/* >> $ARTIFACTS_FOLDER/logs/zipping_uploadable_packs.log || ((($? > 0)) && echo "failed to zip the uploadable packs, ignoring the failure")
    - rm -rf $ARTIFACTS_FOLDER/uploadable_packs
    - python3 ./Tests/scripts/update_conf_json.py
    - cp "./Tests/conf.json" "$ARTIFACTS_FOLDER/conf.json"
    - |
      if [ -n "${INSTANCE_TESTS}" ]; then
        echo "Skipping - not running in INSTANCE_TESTS build"
      else
        echo "====== Collecting tests and content packs ======"
        [ -n "${NIGHTLY}" ] && IS_NIGHTLY=true || IS_NIGHTLY=false
        python3 ./Tests/scripts/collect_tests_and_content_packs.py -n $IS_NIGHTLY
      fi
    - python3 ./Tests/Marketplace/packs_dependencies.py -i ./Tests/id_set.json -o $ARTIFACTS_FOLDER/packs_dependencies.json
    - |
      if [[ -n "${CONTRIB_BRANCH}" || -n "${DEMISTO_SDK_NIGHTLY}" ]]; then
        echo "Skipping Preparing Content Packs For Testing since nightly instances uses production bucket"
      else
        echo "====== Preparing Content Packs For Testing ======"
        ./Tests/scripts/prepare_content_packs_for_testing.sh "$GCS_MARKET_BUCKET"
      fi
    - |
      if [[ -n "${DEMISTO_SDK_NIGHTLY}" ]] || [[ $CI_COMMIT_BRANCH != master ]] && [[ $CI_COMMIT_BRANCH != 20\.* ]] && [[ $CI_COMMIT_BRANCH != 21\.* ]]; then
        echo "Skipping packs download to artifact on non master or release branch"
      else
        ZIP_FOLDER=$(mktemp -d)
        python3 ./Tests/Marketplace/zip_packs.py -b 'marketplace-dist' -z $ZIP_FOLDER -a $ARTIFACTS_FOLDER -s $GCS_MARKET_KEY
      fi
    - |
      if [ -n "${DEMISTO_SDK_NIGHTLY}" ]; then
        echo "Skipping - not running in INSTANCE_TESTS build"
      else
        echo "====== Uploading artifacts to GCP ======"
        ./Tests/scripts/upload_artifacts.sh
      fi
    - |
      if [ -n "${DEMISTO_SDK_NIGHTLY}" ]; then
        echo "Skipping - not running in INSTANCE_TESTS build"
      else
        echo "====== Creating instances ======"
        [ -n "${TIME_TO_LIVE}" ] && TTL=${TIME_TO_LIVE} || TTL=300
        python3 ./Tests/scripts/awsinstancetool/aws_instance_tool.py -envType "$IFRA_ENV_TYPE" -timetolive $TTL -outfile "$ARTIFACTS_FOLDER/env_results.json"
      fi


.test_content_on_server_instances_base:
  extends:
    - .default-job-settings
    - .push-rule
  needs: ["create-instances"]
  stage: run-instances
  dependencies:
    - create-instances
  script:
    - *download_demisto_conf
    - export TEMP=$(cat $ARTIFACTS_FOLDER/filter_envs.json | jq ".\"$INSTANCE_ROLE\"")
# If instance was not created
    - |
      if [[ "$TEMP" != "true" && -z "${NIGHTLY}" ]]; then
        echo "Instance with role $INSTANCE_ROLE was not created"
        exit 0
      fi
    - mv $SSH_CONFIGURATION ~/.ssh/config
    - chmod 700 ~/.ssh/config
    - Tests/scripts/open_ssh_tunnel.sh
    - python3 ./Tests/scripts/wait_until_server_ready.py "$INSTANCE_ROLE"
    - ./Tests/scripts/install_content_and_test_integrations.sh "$INSTANCE_ROLE"
    - ./Tests/scripts/run_tests.sh "$INSTANCE_ROLE"
    - |
      if [ -f ./Tests/failed_tests.txt ]; then
        cp ./Tests/failed_tests.txt $ARTIFACTS_FOLDER/failed_tests.txt
      fi
    - python3 ./Tests/scripts/destroy_instances.py $ARTIFACTS_FOLDER $ARTIFACTS_FOLDER/env_results.json "$INSTANCE_ROLE" "$TIME_TO_LIVE"
    - export PSWD=$(jq .serverLogsZipPassword < $(cat secret_conf_path) | cut -d \" -f 2)
    - zip -P $PSWD -j $ARTIFACTS_FOLDER/Logs.zip $ARTIFACTS_FOLDER/server*.log || ((($? > 0)) && echo "Didn’t find any server logs, skipping this stage" && exit 0)
    - rm -f $ARTIFACTS_FOLDER/server*.log


server_5_0:
  extends: .test_content_on_server_instances_base
  variables:
    INSTANCE_ROLE: "Server 5.0"

server_5_5:
  extends: .test_content_on_server_instances_base
  variables:
    INSTANCE_ROLE: "Server 5.5"

server_6_0:
  extends: .test_content_on_server_instances_base
  variables:
    INSTANCE_ROLE: "Server 6.0"

server_master:
  extends:
    - .test_content_on_server_instances_base
    - .nightly-rule
    - .notify-slack
  variables:
    INSTANCE_ROLE: "Server Master"
    SLACK_TEST_TYPE: "test_playbooks"
    SLACK_ENV_RESULTS: "${ARTIFACTS_FOLDER}/env_results.json"
    SLACK_ONLY_IF: "true"
