default:
  image: docker-io.artifactory.pan.local/devdemisto/gitlab-content-ci:1.0.0.18999
  cache:
    key:
      files:
       - "dev-requirements-py3.txt"
       - "package-lock.json"
    paths:
      - venv/
      - node_modules/
    when: always
  before_script:
    - echo "=== Running before script ==="
    - git checkout $CI_COMMIT_BRANCH
    - mkdir -p -m 777 $ARTIFACTS_FOLDER/
    - |
      if [[ -f "$BASH_ENV" ]]; then
        source "$BASH_ENV"
      fi
    - echo "=== Creating new clean logs folder ==="
    - rm -rf $ARTIFACTS_FOLDER/logs
    - mkdir -p $ARTIFACTS_FOLDER/logs
    - echo "=== Granting execute permissions on files ==="
    - chmod +x ./Tests/scripts/*
    - chmod +x ./Tests/lastest_server_build_scripts/*
    - chmod +x ./Tests/Marketplace/*
    - echo "=== Installing Virtualenv ==="
    - |
     if [ -f "./venv/bin/activate" ]; then
       echo "found venv"
     else
      echo "installing venv"
      NO_HOOKS=1 SETUP_PY2=yes .hooks/bootstrap
     fi
     venv/bin/pip3 install -r .circleci/build-requirements.txt
     venv/bin/pip2 install -r dev-requirements-py2.txt
     source ./venv/bin/activate
    - git config diff.renameLimit 6000
    - export PATH="${PWD}/node_modules/.bin:${PATH}"
    - |
      if [ -n "${DEMISTO_SDK_NIGHTLY}" ]; then
        echo "Installing SDK"
        pip3 install git+https://github.com/demisto/demisto-sdk@master
      fi
    - echo "========= Installing SSH keys ========"
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - chmod 400 $OREGON_CI_KEY
    - ssh-add $OREGON_CI_KEY
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh

    - echo "======= Download configuration ========"
    - ./Tests/scripts/download_demisto_conf.sh

    - echo "========== Build Parameters =========="
    - set | grep -E "^NIGHTLY=|^INSTANCE_TESTS=|^SERVER_BRANCH_NAME=|^ARTIFACT_BUILD_NUM=|^DEMISTO_SDK_NIGHTLY=|^TIME_TO_LIVE=|^CONTRIB_BRANCH=|^FORCE_PACK_UPLOAD=|^PACKS_TO_UPLOAD=|^BUCKET_UPLOAD=|^GCS_MARKET_BUCKET=|^SLACK_CHANNEL="
    - python --version
    - python3 --version
    - node --version
    - npm --version
    - demisto-sdk --version

variables:
  CONTENT_VERSION: "21.3.2"
  SERVER_VERSION: "6.0.0"
  GIT_SHA1: "6fee942518c6b2275a6cb61c1824574171cf58f9" # guardrails-disable-line disable-secrets-detection
  DONT_CACHE_LAST_RESPONSE: "true"
  GCS_MARKET_BUCKET: "marketplace-dist"
  SLACK_CHANNEL: "dmst-content-team"
  DEMISTO_README_VALIDATION: "true"
  ARTIFACTS_FOLDER: "/builds/xsoar/content/artifacts"
  BASH_ENV: "/builds/xsoar/content/artifacts/bash_env"
  PYTHONPATH: "/builds/xsoar/content"
  FEATURE_BRANCH_NAME: "v4.5.0"
# Gitlab CI/CD uses shallow fetch with default depth of 50, these arguments are used to override it
# See here for more about that https://docs.gitlab.com/ee/ci/pipelines/settings.html#git-shallow-clone  # disable-secrets-detection
  GIT_STRATEGY: clone
  GIT_DEPTH: 0

stages:
  - unittests-and-validations
  - create-instances
  - run-instances
  - upload-to-marketplace

create-instances:
  stage: create-instances
  script:
    - |
      demisto-sdk create-id-set -o ./Tests/id_set.json
      cp ./Tests/id_set.json $ARTIFACTS_FOLDER
    - python3 Utils/release_notes_generator.py $CONTENT_VERSION $CI_COMMIT_SHA $CI_BUILD_ID --output $ARTIFACTS_FOLDER/packs-release-notes.md --github-token $GITHUB_TOKEN
    - ./Documentation/commonServerDocs.sh
    -  demisto-sdk create-content-artifacts -a $ARTIFACTS_FOLDER --cpus 8 --content_version $CONTENT_VERSION
    - |
      gcloud auth activate-service-account --key-file="$GCS_ARTIFACTS_KEY" > auth.out 2>&1
      echo "successfully activated google cloud service account"
    - successful_feature_branch_build=$(gsutil ls "gs://xsoar-ci-artifacts/content/$FEATURE_BRANCH_NAME/*" | tail -n 1 | grep -o -E "content/$FEATURE_BRANCH_NAME/[0-9]*")
    - echo $successful_feature_branch_build
    - python3 Utils/merge_content_new_zip.py -f $FEATURE_BRANCH_NAME -b $successful_feature_branch_build
    - zip -j $ARTIFACTS_FOLDER/uploadable_packs.zip $ARTIFACTS_FOLDER/uploadable_packs/* || ((($? > 0)) && echo "failed to zip the uploadable packs, ignoring the failure" && exit 0)
    - rm -rf $ARTIFACTS_FOLDER/uploadable_packs
    - python3 ./Tests/scripts/update_conf_json.py
    - cp "./Tests/conf.json" "$ARTIFACTS_FOLDER/conf.json"
    - |
      if [ -n "${INSTANCE_TESTS}" ];
        then
          echo "Skipping - not running in INSTANCE_TESTS build"
        else
          [ -n "${NIGHTLY}" ] && IS_NIGHTLY=true || IS_NIGHTLY=false
          python3 ./Tests/scripts/collect_tests_and_content_packs.py -n $IS_NIGHTLY
      fi
    - python3 ./Tests/Marketplace/packs_dependencies.py -i ./Tests/id_set.json -o $ARTIFACTS_FOLDER/packs_dependencies.json
    - |
      if [[ -n "${CONTRIB_BRANCH}" || -n "${DEMISTO_SDK_NIGHTLY}" ]] ; then
        echo "Skipping Preparing Content Packs For Testing since nightly instances uses production bucket"
      else
        ./Tests/scripts/prepare_content_packs_for_testing.sh "$GCS_MARKET_BUCKET"
      fi
    - |
      if [[ -n "${DEMISTO_SDK_NIGHTLY}" ]] || [[ $CI_COMMIT_BRANCH != master ]] && [[ $CI_COMMIT_BRANCH != 20\.* ]] && [[ $CI_COMMIT_BRANCH != 21\.* ]]; then
        echo "Skipping packs download to artifact on non master or release branch"
      else
        ZIP_FOLDER=$(mktemp -d)
        python3 ./Tests/Marketplace/zip_packs.py -b 'marketplace-dist' -z $ZIP_FOLDER -a $ARTIFACTS_FOLDER -s $GCS_MARKET_KEY
      fi
    - |
      if [ -n "${DEMISTO_SDK_NIGHTLY}" ];
        then
          echo "Skipping - not running in INSTANCE_TESTS build"
        else
          ./Tests/scripts/upload_artifacts.sh
      fi
    - |
      if [ -n "${DEMISTO_SDK_NIGHTLY}" ];
        then
          echo "Skipping - not running in INSTANCE_TESTS build"
        else
          [ -n "${TIME_TO_LIVE}" ] && TTL=${TIME_TO_LIVE} || TTL=300
          if [ -n "${NIGHTLY}" ] ;
            then
              export IFRA_ENV_TYPE=Nightly # disable-secrets-detection
          elif [ -n "${INSTANCE_TESTS}" ] ;
            then
              export IFRA_ENV_TYPE="Server 5.5" # disable-secrets-detection
          elif [[ -n "${CONTRIB_BRANCH}" || -n "${DEMISTO_SDK_NIGHTLY}" ]] ;
            then
              export IFRA_ENV_TYPE="Server Master" # disable-secrets-detection
          elif [ -n "${BUCKET_UPLOAD}" ] ;
            then
              export IFRA_ENV_TYPE="Bucket-Upload" # disable-secrets-detection
          else
            export IFRA_ENV_TYPE=Content-Env # disable-secrets-detection
          fi
        python3 ./Tests/scripts/awsinstancetool/aws_instance_tool.py -envType "$IFRA_ENV_TYPE" -timetolive $TTL -outfile "$ARTIFACTS_FOLDER/env_results.json"
      fi
  artifacts:
    expire_in: 48 hrs
    paths:
      - /builds/xsoar/content/artifacts/*
    when: always

run-unittests-and-lint:
  stage: unittests-and-validations
  artifacts:
    expire_in: 48 hrs
    paths:
      - /builds/xsoar/content/unit-tests
      - /builds/xsoar/content/artifacts/*
    when: always
  script:
    - echo "====Trigger Private Build===="
    - |
      if [[ -n $FORCE_BUCKET_UPLOAD || -n $BUCKET_UPLOAD ]]; then
        if [[ $CIRCLE_BRANCH =~ pull/[0-9]+ ]]; then
          echo "Skipping - not running in contribution instance"
        else
          python3 Utils/trigger_private_build.py --github-token $GITHUB_TOKEN
        fi
      fi
    - echo "====Test Infrustracture===="
    - python3 -m pytest ./Tests/scripts/infrastructure_tests/ -v
    - python3 -m pytest ./Tests/Marketplace/Tests/ -v
    - python3 -m pytest ./Tests/scripts/utils/tests -v
    - python3 -m pytest ./Tests/tests -v
    - python3 -m pytest ./Tests/private_build/ -v
    - python3 -m pytest Utils -v
    - |
      if [ -n "${DEMISTO_SDK_NIGHTLY}" ] ; then
      ./Tests/scripts/sdk_pylint_check.sh
      fi
    - echo "====Run Unit Testing and Lint===="
    - |
      if [[ "$(echo "$GCS_MARKET_BUCKET" | tr '[:upper:]' '[:lower:]')" != "marketplace-dist" ]]; then
        echo "Skipping validations when uploading to a test bucket."
      else
        echo "demisto-sdk version: $(demisto-sdk --version)"
        echo "mypy version: $(mypy --version)"
        echo "flake8 py2 version: $(python2 -m flake8 --version)"
        echo "flake8 py3 version: $(python3 -m flake8 --version)"
        echo "bandit py2 version: $(python2 -m bandit --version 2>&1)"
        echo "bandit py3 version: $(python3 -m bandit --version 2>&1)"
        echo "vulture py2 version: $(python2 -m vulture --version 2>&1)"
        echo "vulture py3 version: $(python3 -m vulture --version 2>&1)"
        SHOULD_LINT_ALL=$(./Tests/scripts/should_lint_all.sh)
        mkdir ./unit-tests
        if [ -n "$SHOULD_LINT_ALL" ]; then
          echo -e  "----------\nLinting all because:\n${SHOULD_LINT_ALL}\n----------"
          demisto-sdk lint -p 8 -a -q --test-xml ./unit-tests --log-path ./artifacts --failure-report ./artifacts
        else
          demisto-sdk lint -p 8 -g -v --test-xml ./unit-tests --log-path ./artifacts --failure-report ./artifacts
        fi
      fi
    - echo "====Get Private Build Status===="
    - |
      if [[ -n $FORCE_BUCKET_UPLOAD || -n $BUCKET_UPLOAD ]]; then
        if [[ $CIRCLE_BRANCH =~ pull/[0-9]+ ]]; then
          echo "Skipping - not running in contribution instance"
        else
          python3 Utils/get_private_build_status.py --github-token $GITHUB_TOKEN
        fi
      fi
    - echo "====Run Slack Notifier===="
    - |
      if [ -n "${BUCKET_UPLOAD}" ]; then
        ./Tests/scripts/slack_notifier.sh 'bucket_upload_flow' '' "$SLACK_CHANNEL" 'gitlab'
      else
        ./Tests/scripts/slack_notifier.sh 'unittests' ./env_results.json '' 'gitlab'
      fi


run-validations:
  stage: unittests-and-validations
  artifacts:
    expire_in: 48 hrs
    paths:
      - /builds/xsoar/content/artifacts/*
    when: always
  script:
    - echo "====Look For Secrets===="
    - demisto-sdk secrets --post-commit --ignore-entropy
    - echo "====Create id set===="
    - demisto-sdk create-id-set -o ./Tests/id_set.json
    - cp ./Tests/id_set.json $ARTIFACTS_FOLDER
    - echo "====Merge public and private id sets===="
    - |
      if [[ $CIRCLE_BRANCH =~ pull/[0-9]+ ]]; then
          echo "Skipping, Should not run on contributor's branch."
      else
        gcloud auth activate-service-account --key-file="$GCS_MARKET_KEY" > auth.out
        echo "successfully activated google cloud service account"

        echo "Download private ID set"
        gsutil cp "gs://marketplace-dist/content/private_id_set.json" $ARTIFACTS_FOLDER/unified_id_set.json
        echo "successfully downloaded private ID set"
        gcloud auth revoke $GCS_ARTIFACTS_ACCOUNT_NAME

        echo "Merge public and private ID sets"
        demisto-sdk merge-id-sets -i1 ./Tests/id_set.json -i2 $ARTIFACTS_FOLDER/unified_id_set.json -o $CIRCLE_ARTIFACTS/unified_id_set.json
        echo "successfully merged public and private ID sets"
      fi
    - echo "====Update Tests===="
    - python3 ./Tests/scripts/update_conf_json.py
    - cp "./Tests/conf.json" "$ARTIFACTS_FOLDER/conf.json"
    - echo "====Validate Files and Yaml===="
    - |
      if [[ "$(echo "$GCS_MARKET_BUCKET" | tr '[:upper:]' '[:lower:]')" != "marketplace-dist" ]]; then
        echo "Skipping the -Validate Files and Yaml- step when uploading to a test bucket."
      else
        echo "Run flake8 on all excluding Packs (Integraions and Scripts) - they will be handled in linting"
        ./Tests/scripts/pyflake.sh *.py
        find . -maxdepth 1 -type d -not \( -path . -o -path ./Packs -o -path ./venv \) | xargs ./Tests/scripts/pyflake.sh
        echo "Run validate"
        ./Tests/scripts/validate.sh
      fi
    - echo "====Check Spelling===="
    - python3 ./Tests/scripts/circleci_spell_checker.py $CI_COMMIT_BRANCH
    - echo "====Check Build Files Are Up To Date===="
    - |
      if [[ $CIRCLE_BRANCH =~ pull/[0-9]+ ]]; then
        echo "Skipping, Should not run on contributor's branch."
      else
        ./Tests/scripts/is_file_up_to_date.sh .gitlab-ci.yml
        ./Tests/scripts/is_file_up_to_date.sh .dev-requirements-py2.txt
        ./Tests/scripts/is_file_up_to_date.sh .dev-requirements-py3.txt
      fi
    - echo "====Validate content-test-conf Branch Merged===="
    - |
      if [[ $CI_COMMIT_BRANCH = "master" ]]; then
        echo "Skipping, Should not run on master branch."
      else
        # replace slashes ('/') in the branch name, if exist, with underscores ('_')
        UNDERSCORE_CI_BRANCH=${CI_COMMIT_BRANCH//\//_}
        wget --header "Accept: application/vnd.github.v3.raw" --header "Authorization: token $GITHUB_TOKEN" "https://github.com/demisto/content-test-conf/archive/$UNDERSCORE_CI_BRANCH.zip" --no-check-certificate -q
        if [ "$?" != "0" ]; then
          echo "No such branch in content-test-conf: $UNDERSCORE_CI_BRANCH"
        else
          echo "ERROR: Found a branch with the same name in contest-test-conf conf.json - $UNDERSCORE_CI_BRANCH.\n Merge it in order to merge the current branch into content repo."
          exit 1
        fi
      fi
    - echo "====Validate landingPageSections.json===="
    - echo "Download index.zip"
    - INDEX_PATH=$(mktemp)
    - |
      gsutil cp "gs://marketplace-dist/content/packs/index.zip" $INDEX_PATH
    - echo "successfully downloaded index.zip into $INDEX_PATH"

    - UNZIP_PATH=$(mktemp -d)
    - unzip $INDEX_PATH -d $UNZIP_PATH

    - python3 Tests/Marketplace/validate_landing_page_sections.py -i $UNZIP_PATH
    - echo "====Run Slack Notifier===="
    - |
      if [ -n "${BUCKET_UPLOAD}" ]; then
        ./Tests/scripts/slack_notifier.sh 'bucket_upload_flow' '' "$SLACK_CHANNEL"
      fi